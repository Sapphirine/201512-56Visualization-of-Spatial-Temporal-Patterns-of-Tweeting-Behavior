{
  "_args": [
    [
      "ft-poller@https://github.com/Financial-Times/ft-poller/archive/v2.0.0.tar.gz",
      "/Users/ramkashyap/Desktop/cloudNewsTest/node_modules/ft-api-client"
    ]
  ],
  "_from": "https://github.com/Financial-Times/ft-poller/archive/v2.0.0.tar.gz",
  "_id": "ft-poller@2.0.0",
  "_inCache": true,
  "_installable": true,
  "_location": "/ft-poller",
  "_phantomChildren": {},
  "_requested": {
    "name": "ft-poller",
    "raw": "ft-poller@https://github.com/Financial-Times/ft-poller/archive/v2.0.0.tar.gz",
    "rawSpec": "https://github.com/Financial-Times/ft-poller/archive/v2.0.0.tar.gz",
    "scope": null,
    "spec": "https://github.com/Financial-Times/ft-poller/archive/v2.0.0.tar.gz",
    "type": "remote"
  },
  "_requiredBy": [
    "/ft-api-client"
  ],
  "_resolved": "https://github.com/Financial-Times/ft-poller/archive/v2.0.0.tar.gz",
  "_shasum": "5fe92c6f56af9c121c4cf5b242949e9626f3fb9b",
  "_shrinkwrap": null,
  "_spec": "ft-poller@https://github.com/Financial-Times/ft-poller/archive/v2.0.0.tar.gz",
  "_where": "/Users/ramkashyap/Desktop/cloudNewsTest/node_modules/ft-api-client",
  "bugs": {
    "url": "https://github.com/Financial-Times/ft-poller/issues"
  },
  "contributors": [
    {
      "name": "Matt Chadburn",
      "email": "matt.chadburn@ft.com"
    },
    {
      "name": "Rhys Evans",
      "email": "rhys.evans@ft.com"
    }
  ],
  "dependencies": {
    "es6-promise": "^1.0.0",
    "fetchres": "^1.1.0",
    "isomorphic-fetch": "^2.0.0"
  },
  "description": "An http client to periodically fetch and cache data from web services",
  "devDependencies": {
    "chai": "^1.9.1",
    "jshint": "2.5.0",
    "mocha": "^1.21.0",
    "next-build-tools": "^1.17.7",
    "nock": "^0.42.2",
    "sinon": "^1.10.3",
    "timer-shim": "^0.3.0"
  },
  "directories": {
    "lib": "./lib"
  },
  "homepage": "https://github.com/Financial-Times/ft-poller#readme",
  "keywords": [
    "FT",
    "async",
    "job scheduler",
    "microservices"
  ],
  "license": "MIT",
  "main": "./src/server.js",
  "name": "ft-poller",
  "optionalDependencies": {},
  "peerDependencies": {
    "es6-promise": "*"
  },
  "readme": "\nScheduled, asynchronous JSON fetching for Node.js applications.\n\n### Background\n\nThe classic request cycle for a web application follows a call from a client\nto the server, which in turn makes one or more further requests to some\nunderlying service(s). \n\n                                    +---> Web service 1 --> Data \n                                    |       \n    Client ---> Presentation tier --|---> Web service 2 --> Data\n                                    |   \n                                    +---> Web service 3 --> Data\n\nOnce the data has been retrieved the response makes it's way back through the\nvarious layers to the client. \n\nThis causes two problems.\n\nFirstly, your response is dependent on the slowest service to respond. If every\nrequest is hanging around waiting for 'the slow one' your performance is pegged\nto the worst performing part of your application.\n\nSecondly, by far the slowest thing in this type of architecture is the\nround-trip between the presentation tier and the service(s). The more of these\nopen connections you have hanging around, waiting to close, the greater the\nburden you place on your server.\n\n#### Async\n\nOften though, and this is especially true of News sites, the data doesn't\nchange radically from second to second so this round trip is wasted effort. \n\nIt's much more efficient for each presentation tier server to periodically\nfetch the data it needs (or listen for a message to signal when new content is\navailable), stash it in memory, then use that to service any incoming requests.\n\nThis suits a [microservice\narchitecture](http://martinfowler.com/articles/microservices.html), where many\ndiscrete modules, APIs etc. need to be assembled by a presentation tier before\nbeing rendered out to the client (as HTML, JSON etc.). \n\nThis pattern (of asynchronous fetching) allows the presentation tier to focus on\nbuilding a response from existing data (in memory) and sending it back out the\nfront door as quickly as possible.\n\n### Usage\n\nInstall it,\n\n    npm install ft-poller\n\nYou can create an instance of Poller like so,\n\n    // Nb. do `npm install es6-promise` if running node < 11.x \n    GLOBAL.Promise = require('es6-promise').Promise;\n\n    var Poller = require('ft-poller'),\n        response;\n\n    var p = new Poller({\n        // instead of url can also pass an 'options' property compatible with request https://github.com/request/request#requestoptions-callback\n        url: 'http://www.example.com/foo', \n        refreshInterval: 2000,\n        parseData: function (data) {\n            response = data;\n        }\n    });\n\n    p.on('error', function (err) {\n        console.error(err)\n    })\n\nThis will fire a request every 2s to example.com/foo and cache the result\nin _response_. \n\nYou can start polling like so,\n\n    p.start()\n    \nAnd stop it like this,\n\n    p.stop()\n\nSometimes you don't want to wait the _refreshInterval_ to have your data\npopulated, so passing _initialRequest: true_ will fire the first request as\nsoon as the object is created, and then afterwards, at every refresh interval. \n\n    p.start({ initialRequest: true });\n\nUnder the hood ft-poller uses [`request`](https://www.npmjs.org/package/request) \nso you can specify an `options` property instead of `url`, which will be passed\nstraight to `request`. This allows using e.g `POST` instead of `GET`.\n\n### Events\n\nGiven the asynchronous nature of this library, events might provide a simple\ninterface to attach other async code to.\n\n#### Ok\n\nThis fires each time the polling mechanism has successfully received a repsonse\nfrom it's source. Eg, \n\n    var p = new Poller({ url: 'http://example.com/123' })\n\n    p.on('ok', function (response, latency) {\n        // ... \n    })\n\n#### Error\n\nThis fires each time the polling mechanism fails, passing the error as an\nargument. Eg, \n\n    p.on('error', function (response) {\n        // ... \n    })\n\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/Financial-Times/ft-poller.git"
  },
  "version": "2.0.0"
}
